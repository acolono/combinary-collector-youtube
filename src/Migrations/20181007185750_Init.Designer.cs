// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YoutubeCollector.Db;

namespace YoutubeCollector.Migrations
{
    [DbContext(typeof(StorageContext))]
    [Migration("20181007185750_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("YoutubeCollector.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorChannelUrl");

                    b.Property<string>("AuthorDisplayName");

                    b.Property<string>("AuthorProfileImageUrl");

                    b.Property<int>("CommentType");

                    b.Property<long?>("LikeCount");

                    b.Property<string>("ModerationStatus");

                    b.Property<string>("OriginalText");

                    b.Property<string>("ParentId");

                    b.Property<DateTime?>("PublishedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("CommentType");

                    b.HasIndex("VideoId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("YoutubeCollector.Models.Statistics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("CommentCount")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<decimal?>("DislikeCount")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<decimal?>("LikeCount")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("VideoId");

                    b.Property<decimal?>("ViewCount")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("YoutubeCollector.Models.Video", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CaptionsAvailable");

                    b.Property<string>("ChannelId");

                    b.Property<string>("ChannelTitle");

                    b.Property<string>("Description");

                    b.Property<string>("Duration");

                    b.Property<bool>("Embeddable");

                    b.Property<bool>("HasComments");

                    b.Property<string>("MaxResImage");

                    b.Property<DateTime?>("PublishedAt");

                    b.Property<string>("Rating");

                    b.Property<string[]>("Tags");

                    b.Property<string>("Thumbnail");

                    b.Property<string>("Title");

                    b.Property<string[]>("TopicCategories");

                    b.HasKey("Id");

                    b.HasIndex("HasComments");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("YoutubeCollector.Models.Comment", b =>
                {
                    b.HasOne("YoutubeCollector.Models.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId");
                });

            modelBuilder.Entity("YoutubeCollector.Models.Statistics", b =>
                {
                    b.HasOne("YoutubeCollector.Models.Video", "Video")
                        .WithMany("Statistics")
                        .HasForeignKey("VideoId");
                });
#pragma warning restore 612, 618
        }
    }
}
